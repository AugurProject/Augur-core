# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

#### must be first data members to match Delegator.sol
data controller
data controllerLookupName
####

inset('../macros/externs.sem')
inset('../macros/safeMath.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/require.sem')

data initialized
data market
data bondHolder
data disputedPayoutDistributionHash
data bondRemainingToBePaidOut

def any():
    assertNoValue()

def initialize(market: address, bondHolder: address, bondAmount: uint256, payoutDistributionHash: int256):
    require(not self.initialized)
    self.initialized = 1
    self.market = market
    self.bondHolder = bondHolder
    self.disputedPayoutDistributionHash = payoutDistributionHash
    self.bondRemainingToBePaidOut = bondAmount * 2
    return 1

def withdraw():
    require(msg.sender == self.bondHolder)
    require(not self.market.isContainerForDisputeBondToken(self) or (self.market.isFinalized() and self.market.getFinalPayoutDistributionHash() != self.disputedPayoutDistributionHash))
    require(self.getBranch().getForkingMarket() != self.market)
    reputationToken = self.getReputationToken()
    amountToTransfer = reputationToken.balanceOf(self)
    self.bondRemainingToBePaidOut = safeSub(self.bondRemainingToBePaidOut, amountToTransfer)
    reputationToken.transfer(self.bondHolder, amountToTransfer)
    return 1

# FIXME: We should be minting coins in this scenario in order to achieve 2x
# target payout for bond holders during a fork.  Ideally, the amount minted is
# capped at the amount of tokens redeemed on other branches, so we may have to
# require the user to supply branches to deduct from with their call to this.
def withdrawToBranch(shadyBranch: address):
    require(msg.sender == self.bondHolder)
    require(not self.market.isContainerForDisputeBondToken(self) or self.getBranch().getForkingMarket() == self.market)
    require(self.market.getBranch().isParentOf(shadyBranch))
    legitBranch = shadyBranch
    require(legitBranch.getParentPayoutDistributionHash() != self.disputedPayoutDistributionHash)
    reputationToken = self.getReputationToken()
    amountToTransfer = reputationToken.balanceOf(self)
    destinationReputationToken = legitBranch.getReputationToken()
    reputationToken.migrateOut(destinationReputationToken, self, amountToTransfer)
    self.bondRemainingToBePaidOut = safeSub(self.bondRemainingToBePaidOut, amountToTransfer)
    destinationReputationToken.transfer(self.bondHolder, amountToTransfer)
    return 1


####
#### Getters
####

def getTypeName():
    return "DisputeBondToken"

def getMarket():
    return(self.market: address)

def getBranch():
    return(self.market.getBranch(): address)

def getReputationToken():
    return(self.market.getReputationToken(): address)

def getBondHolder():
    return(self.bondHolder: address)

def getDisputedPayoutDistributionHash():
    return(self.disputedPayoutDistributionHash)

def getBondRemainingToBePaidOut():
    return(self.bondRemainingToBePaidOut)


####
#### ERC20(ish) Implementation
####

event Transfer(from:address:indexed, to:address:indexed, attotokens:uint256)

def totalSupply():
    return 1

def balanceOf(address: address):
    if address == self.bondHolder:
        return 1
    else:
        return 0

def transfer(destinationAddress: address, attotokens: uint256):
    require(attotokens == 1)
    require(msg.sender == self.bondHolder)
    self.bondHolder == destinationAddress
    return 1
