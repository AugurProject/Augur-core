# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

##### must be first data members to match delegator.se
data controller
data controllerLookupName
#####

macro MARKET_FACTORY: self.controller.lookup('marketFactory')
macro REGISTRATION_TOKEN_FACTORY: self.controller.lookup('registrationTokenFactory')
macro SORTED_LINKED_LIST_FACTORY: self.controller.lookup('sortedLinkedListFactory')

inset('../macros/externs.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/safeMath.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/require.sem')
inset('../macros/unitConversions.sem')
inset('../macros/durations.sem')

data initialized
data branch
data startTime
data registrationToken
data markets
data limitedReporterMarkets
data allReporterMarkets
data reportsByReporter[2**160]
data numberOfReportsByMarket[]

# intentionally does not refund in `any`, this contract will receive ETH when a market is created through it, should refund in all other calls though

def initialize(branch: address, reportingWindowId: int256):
    require(not self.initialized)
    self.initialized = 1
    self.branch = branch
    self.startTime = reportingWindowId * self.branch.getReportingPeriodDurationInSeconds()
    self.registrationToken = REGISTRATION_TOKEN_FACTORY.createRegistrationToken(self.controller, self)
    self.markets = create('../libraries/set.se')
    self.limitedReporterMarkets = create('../libraries/set.se')
    self.allReporterMarkets = create('../libraries/set.se')
    return(1)

def createNewMarket(endTime: int256, numOutcomes: int256, payoutDenominator: int256, feePerEthInWei: int256, denominationToken: address, creator: address, minDisplayPrice: int256, maxDisplayPrice: int256, automatedReporterAddress: address, topic: int256):
    require(2 <= numOutcomes and numOutcomes <= 8)
    require(2 <= payoutDenominator and payoutDenominator <= 2**254)
    require(block.timestamp < self.startTime)
    require(self.branch.getReportingWindowByMarketEndTime(endTime, automatedReporterAddress != 0))
    newMarket = MARKET_FACTORY.createMarket(self.controller, self, endTime, numOutcomes, payoutDenominator, feePerEthInWei, denominationToken, creator, minDisplayPrice, maxDisplayPrice, automatedReporterAddress, topic, value = msg.value)
    self.markets.addSetItem(newMarket)
    self.limitedReporterMarkets.addSetItem(newMarket)
    return(newMarket)

def migrateMarketInFromSibling():
    assertNoValue()
    shadyReportingWindow = msg.sender.getReportingWindow()
    require(self.branch.isContainerForReportingWindow(shadyReportingWindow))
    originalReportingWindow = shadyReportingWindow
    require(originalReportingWindow.isContainerForMarket(msg.sender))
    market = msg.sender
    self.privateAddMarket(market)
    return(1)

def migrateMarketInFromNibling():
    assertNoValue()
    shadyBranch = msg.sender.getBranch()
    require(self.branch.isParentOf(shadyBranch))
    originalBranch = shadyBranch
    shadyReportingWindow = msg.sender.getReportingWindow()
    require(originalBranch.isContainerForReportingWindow(shadyReportingWindow))
    originalReportingWindow = shadyReportingWindow
    require(originalReportingWindow.isContainerForMarket(msg.sender))
    market = msg.sender
    self.privateAddMarket(market)
    return(1)

def removeMarket():
    assertNoValue()
    require(self.markets.contains(msg.sender))
    market = msg.sender
    self.getBranch().removeSortedMarket(market)
    self.getBranch().updateTopicPopularity(market.getTopic(), -market.getShareToken(0).totalSupply())
    self.markets.remove(market)
    self.limitedReporterMarkets.remove(market)
    self.allReporterMarkets.remove(market)
    return(1)

def updateMarketPhase():
    assertNoValue()
    require(self.markets.contains(msg.sender))
    market = msg.sender
    if (market.isDoneWithAllReporters()):
        self.allReporterMarkets.remove(market)
        self.limitedReporterMarkets.remove(market)
        return(0)
    if (market.isDoneWithLimitedReporters()):
        self.allReporterMarkets.addSetItem(market)
        self.limitedReporterMarkets.remove(market)
        return(0)
    # defaults to in limited reporter markets
    self.allReporterMarkets.remove(market)
    self.limitedReporterMarkets.addSetItem(market)
    return(1)

def noteReport(market: address, reporter: address, payoutDistributionHash: int256):
    assertNoValue()
    require(self.markets.contains(market))
    require(market.getReportingTokenOrZeroByPayoutDistributionHash(payoutDistributionHash) == msg.sender)
    require(market.isInAllReportingPhase() or market.isInLimitedReportingPhase())
    if (market.isInAllReportingPhase()):
        # always give credit for events in all-reporters phase
        self.privateNoteReport(market, reporter)
    elif (self.numberOfReportsByMarket[market] < self.getMaxReportsPerLimitedReporterMarket()):
        # only give credit for limited reporter markets up to the max reporters for that market
        self.privateNoteReport(market, reporter)
    # no credit in all other cases (but user can still report)
<<<<<<< b64026b4289e577637f36311905ec4fc91f7b49c
    return(1)
=======

<<<<<<< d15ef6eb6281f767bd076a6798f8647bce71862c
def compare(firstMarket: int256, secondMarket: int256):
    firstOI = firstMarket.getShareToken(0).totalSupply()
    secondOI = secondMarket.getShareToken(0).totalSupply()

    if (firstOI > secondOI):
        return(1)
    if (firstOI < secondOI):
        return(-1)
    return(0)
>>>>>>> Checkpoint commit. Sorted markets within reporting window based on OI

=======
>>>>>>> Move sorting of markets to branches. Also add attempt at optimizing internal re-adds of items in sortedLinkedLists
####
#### Getters
####

def getBranch():
    assertNoValue()
    return(self.branch)

def getRegistrationToken():
    assertNoValue()
    return(self.registrationToken)

def getReputationToken():
    assertNoValue()
    return(self.branch.getReputationToken())

def getStartTime():
    assertNoValue()
    return(self.startTime)

def getEndTime():
    assertNoValue()
    return(self.getDisputeEndTime())

def getReportingStartTime():
    assertNoValue()
    return(self.getStartTime())

def getReportingEndTime():
    assertNoValue()
    return(self.getStartTime() + REPORTING_DURATION_SECONDS)

def getDisputeStartTime():
    assertNoValue()
    return(self.getReportingEndTime())

def getDisputeEndTime():
    assertNoValue()
    return(self.getDisputeStartTime() + REPORTING_DISPUTE_DURATION_SECONDS)

def isActive():
    assertNoValue()
    if (block.timestamp <= self.getStartTime()):
        return(0)
    if (block.timestamp >= self.getEndTime()):
        return(0)
    return(1)

def isReportingActive():
    assertNoValue()
    if (block.timestamp <= self.getStartTime()):
        return(0)
    if (block.timestamp >= self.getReportingEndTime()):
        return(0)
    return(1)

def isDisputeActive():
    assertNoValue()
    if (block.timestamp <= self.getDisputeStartTime()):
        return(0)
    if (block.timestamp >= self.getEndTime()):
        return(0)
    return(1)

def getTargetReportsPerLimitedReporterMarket():
    assertNoValue()
    limitedReporterMarketCount = self.limitedReporterMarkets.count()
    registeredReporters = self.registrationToken.getPeakSupply()
    minimumReportsPerMarket = 7
    totalReportsForAllLimitedReporterMarkets = minimumReportsPerMarket * limitedReporterMarketCount

    if (registeredReporters > totalReportsForAllLimitedReporterMarkets):
        factor = registeredReporters / totalReportsForAllLimitedReporterMarkets
        minimumReportsPerMarket = minimumReportsPerMarket * factor

    return(minimumReportsPerMarket)

def getMaxReportsPerLimitedReporterMarket():
    assertNoValue()
    return(self.getTargetReportsPerLimitedReporterMarket() + 2)

def getRequiredReportsPerReporterForlimitedReporterMarkets():
    assertNoValue()
    return(self.getTargetReportsPerLimitedReporterMarket() * self.limitedReporterMarkets.count() / self.registrationToken.totalSupply())

def getTargetReportsPerReporter():
    assertNoValue()
    limitedMarketReportsPerReporter = self.getRequiredReportsPerReporterForlimitedReporterMarkets()
    return(self.allReporterMarkets.count() + limitedMarketReportsPerReporter)

def getReportsByReporter(reporter: address):
    assertNoValue()
    if (not self.reportsByReporter[reporter]):
        self.reportsByReporter[reporter] = create('../libraries/set.se')
    return(self.reportsByReporter[reporter])

def isContainerForRegistrationToken(shadyRegistrationToken: address):
    assertNoValue()
    return(self.registrationToken == shadyRegistrationToken)

def isContainerForMarket(shadyMarket: address):
    assertNoValue()
    return(self.markets.contains(shadyMarket))

def isDoneReporting(reporter: address):
    assertNoValue()
    return(self.getReportsByReporter(reporter).count() >= self.getTargetReportsPerReporter())

####
#### Private
####

def privateAddMarket(market: address):
    assertPrivateCall()
    require(not self.markets.contains(market))
    require(not self.limitedReporterMarkets.contains(market))
    require(not self.allReporterMarkets.contains(market))
    self.markets.addSetItem(market)
    if (market.isDoneWithAllReporters()):
        return
    if (market.isDoneWithLimitedReporters()):
        self.allReporterMarkets.addSetItem(market)
        return(1)
    self.limitedReporterMarkets.addSetItem(market)
<<<<<<< f7cb457d0476bf00c27ec7e45e9c287814c2894a
    return(1)
=======
    # Update sorted topic popularity based just on OI
    self.getBranch().updateTopicPopularity(market.getTopic(), market.getShareToken(0).totalSupply())
>>>>>>> - Add more tests

def privateNoteReport(market: address, reporter: address):
    assertPrivateCall()
    reports = self.getReportsByReporter(reporter)
    if (reports.contains(market)):
        return(1)
    reports.addSetItem(market)
    self.numberOfReportsByMarket[market] += 1
    return(1)
