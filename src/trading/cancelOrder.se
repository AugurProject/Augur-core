# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

### This allows you to cancel orders on the book

macro ORDERS: self.controller.lookup('Orders')
macro MUTEX: self.controller.lookup('Mutex')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/safeMath.sem')
inset('../macros/orderFields.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/require.sem')
inset('../macros/orderFields.sem')

data controller

# Order types
macro BID: 1
macro ASK: 2

# Field counts
macro ORDER_FIELDS: 8

def init():
    self.controller = msg.sender

# @public
def publicCancelOrder(orderID: bytes32, type: uint8, market: address, outcome: uint8):
    assertNoValue()
    MUTEX.acquire()
    self.cancelOrder(msg.sender, orderID, type, market, outcome)
    MUTEX.release()
    return(1)

# Cancellation: cancels an order, if a bid refunds money, if an ask returns shares
# @internal
# @returns 1 if success, throws on failure
def cancelOrder(sender: address, orderID: bytes32, type: uint8, market: address, outcome: uint8):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    require(sender)
    require(orderID)
    require(market)

    # Look up the order the sender wants to cancel
    fxpAmount = ORDERS.getAmount(orderID, type, market, outcome)
    fxpPrice = ORDERS.getPrice(orderID, type, market, outcome)
    owner = ORDERS.getOrderOwner(orderID, type, market, outcome)
    fxpMoneyEscrowed = ORDERS.getOrderMoneyEscrowed(orderID, type, market, outcome)
    fxpSharesEscrowed = ORDERS.getOrderSharesEscrowed(orderID, type, market, outcome)

    # Check that the order ID is correct, the type is bid (1) or ask (2), and that the sender owns the order
    require(type == BID or type == ASK)
    require(sender == owner)

    # Clear the order first
    ORDERS.removeOrder(orderID, type, market, outcome)

    self.refundOrder(sender, type, fxpSharesEscrowed, fxpMoneyEscrowed, market, outcome)

    # Log cancellation
    ORDERS.cancelOrderLog(market, sender, fxpPrice, fxpAmount, orderID, outcome, type, fxpMoneyEscrowed, fxpSharesEscrowed)
    return(1)

# Issue refunds
# @private
def refundOrder(sender: address, type: uint8, fxpSharesEscrowed: uint256, fxpMoneyEscrowed: uint256, market: address, outcome: uint8):
    assertNoValue()
    assertPrivateCall()

    if(fxpSharesEscrowed > 0):
        # Return to user sharesEscrowed that weren't filled yet for all outcomes except the order outcome
        if(type == BID):
            i = 0
            while(i < market.getNumberOfOutcomes()):
                if(i != outcome):
                    market.getShareToken(i).transfer(sender, fxpSharesEscrowed)
                i += 1
        # Shares refund if has shares escrowed for this outcome
        elif(type == ASK):
            market.getShareToken(outcome).transfer(sender, fxpSharesEscrowed)

    # Return to user moneyEscrowed that wasn't filled yet
    if(fxpMoneyEscrowed > 0):
        require(market.getDenominationToken().transferFrom(market, sender, fxpMoneyEscrowed))

    return(1)

def setController(newController: address):
    require(msg.sender == self.controller)
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    require(msg.sender == self.controller)
    suicide(to)
