# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

macro ORDERS: self.controller.lookup('Orders')
macro COMPLETE_SETS: self.controller.lookup('CompleteSets')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')
inset('../macros/orderFields.sem')
inset('../macros/require.sem')
inset('../macros/assertPrivateCall.sem')

data controller

# Trade types
macro BID: 1
macro ASK: 2

# Field counts
macro ORDER_FIELDS: 8

def any():
    assertNoValue()

def init():
    self.controller = msg.sender

# Filling a bid [aka selling shares]
# Users need to have approved markets to spend their money, simulate fill client side to check in case an order is invalid due to someone not having approved
# Scenarios:
#  - Asker (taker) has maxValue - price and expects complete set minus the one they're selling
#  - Asker (taker) has shares and expects to be paid price - minValue for them
#  - Bidder (maker) owns all shares except the one they're buying and has escrowed them and wants to pay price - minValue for the share and then sell the complete set for range thus getting maxValue - price at the end
#  - Bidder (maker) has escrowed price - minValue for their shares
# @internal
# @return fxp
def takeBidOrder(taker: address, orderID: bytes32, market: address, outcome: uint8, fxpAmountTakerWants: uint256, tradeGroupID: uint256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)

    # Get order
    takerDesiredSharesForThisOrder = min(fxpAmountTakerWants, ORDERS.getAmount(orderID, type, market, outcome))
    orderDisplayPrice = ORDERS.getPrice(orderID, type, market, outcome)
    maker = ORDERS.getOrderMaker(orderID, type, market, outcome)
    makerSharesEscrowed = min(ORDERS.getOrderSharesEscrowed(orderID, type, market, outcome), fxpAmountTakerWants)
    require(maker != taker)

    require(orderDisplayPrice <= market.getMaxDisplayPrice())
    require(orderDisplayPrice >= market.getMinDisplayPrice())
    require(market.getMaxDisplayPrice() + market.getMinDisplayPrice() <= 2**254)

    # We can't use safeSub here because it disallows subtracting negative numbers. Worst case here is an operation of 2**254 - 1 as required above, which won't overflow
    sharePriceShort = market.getMaxDisplayPrice() - orderDisplayPrice
    # We can't use safeSub here because it disallows subtracting negative numbers. Worst case here is an operation of 2**254 - 1 as required above, which won't overflow
    sharePriceLong = orderDisplayPrice - market.getMinDisplayPrice()
    shareToken = market.getShareToken(outcome)
    denominationToken = market.getDenominationToken()
    numberOfOutcomes = market.getNumberOfOutcomes()
    # sanity checks
    require(not denominationToken.balanceOf(self))
    i = 0
    while i < numberOfOutcomes:
        require(not market.getShareToken(i).balanceOf(self))
        i += 1

    # figure out how much of the taker's target will be leftover at the end
    fxpAmountTakerWantsRemaining = safeSub(fxpAmountTakerWants, takerDesiredSharesForThisOrder)
    # figure out how many shares taker has available to complete this bid
    takerSharesAvailable = min(takerDesiredSharesForThisOrder, shareToken.balanceOf(taker))
    makerSharesDepleted = 0
    makerTokensDepleted = 0
    takerSharesDepleted = 0
    takerTokensDepleted = 0

    # maker is closing a short, taker is closing a long
    if makerSharesEscrowed and takerSharesAvailable:
        # figure out how many complete sets exist between the maker and taker
        completeSets = min(makerSharesEscrowed, takerSharesAvailable)
        # transfer the appropriate amount of shares from taker to this contract
        shareToken.transferFrom(taker, self, completeSets)
        # transfer the appropriate amount of shares from maker (escrowed in market) to this contract
        i = 0
        while i < numberOfOutcomes:
            tempShareToken = market.getShareToken(i)
            if tempShareToken.allowance(self, COMPLETE_SETS) < completeSets:
                tempShareToken.approve(COMPLETE_SETS, 2**254)
            if i != outcome:
                tempShareToken.transferFrom(market, self, completeSets)
            i += 1
        # sell the complete sets (this will pay fees)
        COMPLETE_SETS.sellCompleteSets(self, market, completeSets)
        # get the completeSetFee
        payout = denominationToken.balanceOf(self)
        completeSetFee = safeSub(completeSets, payout)
        # maker gets their share minus proportional fee
        shortFee = safeDiv(safeMul(completeSetFee, sharePriceShort), market.getMaxDisplayPrice() - market.getMinDisplayPrice())
        makerShare = safeFxpMul(completeSets, sharePriceShort) - shortFee
        denominationToken.transfer(maker, makerShare)
        # taker gets remainder
        takerShare = denominationToken.balanceOf(self)
        denominationToken.transfer(taker, takerShare)
        # adjust internal accounting
        makerSharesDepleted += completeSets
        makerTokensDepleted += 0
        takerSharesDepleted += completeSets
        takerTokensDepleted += 0
        takerSharesAvailable = safeSub(takerSharesAvailable, completeSets)
        makerSharesEscrowed = safeSub(makerSharesEscrowed, completeSets)
        takerDesiredSharesForThisOrder = safeSub(takerDesiredSharesForThisOrder, completeSets)

    # maker is closing a short, taker is opening a short
    if makerSharesEscrowed and takerDesiredSharesForThisOrder:
        # transfer shares from maker (escrowed in market) to taker
        i = 0
        while i < numberOfOutcomes:
            if i != outcome:
                market.getShareToken(i).transferFrom(market, taker, makerSharesEscrowed)
            i += 1
        # transfer tokens from taker to maker
        tokensRequiredToCoverTaker = safeFxpMul(makerSharesEscrowed, sharePriceShort)
        denominationToken.transferFrom(taker, maker, tokensRequiredToCoverTaker)
        # adjust internal accounting
        makerSharesDepleted += makerSharesEscrowed
        makerTokensDepleted += 0
        takerSharesDepleted += 0
        takerTokensDepleted += tokensRequiredToCoverTaker
        takerDesiredSharesForThisOrder = safeSub(takerDesiredSharesForThisOrder, makerSharesEscrowed)
        makerSharesEscrowed = 0

    # maker is opening a long, taker is closing a long
    if takerSharesAvailable and takerDesiredSharesForThisOrder:
        # transfer shares from taker to maker
        shareToken.transferFrom(taker, maker, takerSharesAvailable)
        # transfer tokens from maker (escrowed in market) to taker
        tokensRequiredToCoverMaker = safeFxpMul(takerSharesAvailable, sharePriceLong)
        denominationToken.transferFrom(market, taker, tokensRequiredToCoverMaker)
        # adjust internal accounting
        makerSharesDepleted += 0
        makerTokensDepleted += tokensRequiredToCoverMaker
        takerSharesDepleted += takerSharesAvailable
        takerTokensDepleted += 0
        takerDesiredSharesForThisOrder = safeSub(takerDesiredSharesForThisOrder, takerSharesAvailable)
        takerSharesAvailable = 0

    # maker is opening a long, taker is opening a short
    if takerDesiredSharesForThisOrder:
        # transfer cash from both parties into this contract for complete set purchase
        takerPortionOfCompleteSetCost = safeDiv(safeMul(takerDesiredSharesForThisOrder, sharePriceShort), market.getMaxDisplayPrice() - market.getMinDisplayPrice())
        denominationToken.transferFrom(taker, self, takerPortionOfCompleteSetCost)
        makerPortionOfCompleteSetCost = safeSub(takerDesiredSharesForThisOrder, takerPortionOfCompleteSetCost)
        denominationToken.transferFrom(market, self, makerPortionOfCompleteSetCost)
        # buy a complete set
        if denominationToken.allowance(self, COMPLETE_SETS) < takerPortionOfCompleteSetCost + makerPortionOfCompleteSetCost:
            denominationToken.approve(COMPLETE_SETS, 2**254)
        COMPLETE_SETS.buyCompleteSets(self, market, takerDesiredSharesForThisOrder)
        # send outcome share to maker and all other shares to taker
        shareToken.transfer(maker, takerDesiredSharesForThisOrder)
        i = 0
        while i < numberOfOutcomes:
            if i != outcome:
                market.getShareToken(i).transfer(taker, takerDesiredSharesForThisOrder)
            i +=1
        # adjust internal accounting
        makerSharesDepleted += 0
        makerTokensDepleted += makerPortionOfCompleteSetCost
        takerSharesDepleted += 0
        takerTokensDepleted += takerPortionOfCompleteSetCost
        takerDesiredSharesForThisOrder = 0

    ORDERS.takeOrderLog(market, outcome, BID, orderID, taker, makerSharesDepleted, makerTokensDepleted, takerSharesDepleted, takerTokensDepleted, tradeGroupID)
    ORDERS.fillOrder(orderID, BID, market, outcome, makerSharesDepleted, makerTokensDepleted)

    # make sure we didn't accidentally leave anything behind
    require(not denominationToken.balanceOf(self))
    i = 0
    while i < numberOfOutcomes:
        require(not market.getShareToken(i).balanceOf(self))
        i += 1

    return fxpAmountTakerWantsRemaining

# @controller
def setController(newController: address):
    require(msg.sender == self.controller)
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    require(msg.sender == self.controller)
    suicide(to)
