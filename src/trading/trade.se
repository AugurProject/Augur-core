# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

macro MUTEX: self.controller.lookup('Mutex')
macro ORDERS: self.controller.lookup('orders')
macro ORDERS_FETCHER: self.controller.lookup('ordersFetcher')
macro TAKEORDER: self.controller.lookup('takeOrder')
macro MAKEORDER: self.controller.lookup('makeOrder')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/require.sem')

data owner
data controller
data initialized

# Trade types
macro BID: 1
macro ASK: 2

# trade directions
macro BUYING: 1
macro SELLING: 2

# Minimum gas needed to execute the make and/or take functions
macro MINIMUM_GAS_NEEDED: 300000

def init():
    self.owner = msg.sender

def initialize(controller: address):
    require(msg.sender == self.owner)
    require(not self.initialized)
    initialized = 1
    self.controller = controller
    return 1

# @public
# @return fxp
def publicBuy(market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    output = self.trade(msg.sender, BUYING, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(output)

# @public
# @return fxp
def publicSell(market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    output = self.trade(msg.sender, SELLING, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(output)

# @public
# @return fxp
def publicTrade(direction: int256, market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    output = self.trade(msg.sender, direction, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(output)

# Match an order with the best bid or ask.
# @public
# @return fxp
def publicTakeBestOrder(direction: int256, market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    fxpAmountRemaining = self.takeBestOrder(msg.sender, direction, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(fxpAmountRemaining)

# Take orders from the head of the order list while prices are better than the limit price; then make.
# @internal
# @return fxp
def trade(sender: address, direction: int256, market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    fxpAmount = self.takeBestOrder(sender, direction, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    if(fxpAmount > 0 and msg.gas >= MINIMUM_GAS_NEEDED):
        return MAKEORDER.makeOrder(sender, direction, fxpAmount, fxpPrice, market, outcome, 0, 0, tradeGroupID)
    return 1

# @internal
# @return fxp
def takeBestOrder(sender: address, direction: int256, market: address, outcome: int256, fxpAmount: int256, fxpPrice: int256, tradeGroupID: int256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    require(direction == BUYING or direction == SELLING)
    # we need to take a BID (1) if we want to SELL (2) and we need to take an ASK (2) if we want to BUY (1)
    type = (not (direction - 1)) + 1
    orderID = ORDERS.getBestOrderID(type, market, outcome)
    while(orderID != 0 and fxpAmount > 0 and msg.gas >= MINIMUM_GAS_NEEDED):
        fxpOrderPrice = ORDERS.getPrice(orderID, type, market, outcome)
        if type == BID:
            isAcceptablePrice = fxpOrderPrice >= fxpPrice
        if type == ASK:
            isAcceptablePrice = fxpOrderPrice <= fxpPrice
        if isAcceptablePrice:
            ORDERS.setPrice(market, outcome, fxpOrderPrice)
            ORDERS.modifyMarketVolume(market, fxpAmount)
            orderOwner = ORDERS_FETCHER.getOrderOwner(orderID, type, market, outcome)
            nextOrderID = ORDERS.getWorseOrderID(orderID, type, market, outcome)
            if(orderOwner != sender):
                fxpAmount = TAKEORDER.takeOrder(sender, orderID, type, market, outcome, fxpAmount, tradeGroupID)
            orderID = nextOrderID
        else:
            orderID = 0
    return(fxpAmount)

# @controller
def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
