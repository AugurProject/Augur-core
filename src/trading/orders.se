# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

inset('../macros/externs.sem')
inset('../macros/require.sem')
inset('../macros/safeMath.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/orderFields.sem')

### Storage of all data associated with orders

data controller
data owner
data initialized

# indices: marketID, outcomeID, type, orderID
data orders[][][][](fxpAmount, fxpPrice, owner, fxpSharesEscrowed, fxpMoneyEscrowed, betterOrderID, worseOrderID, gasPrice)
# prices keeps track of the latest traded fxpPrice for a given outcome in a market [market is the key]
data marketOrderData[](volume, prices[])
# indices are marketID, outcomeID, and type
data bestOrder[][][]
data worstOrder[][][]


event CancelOrder(market: address: indexed, sender: address: indexed, fxpPrice: int256, fxpAmount, orderID: address, outcome: int256, type: int256, cashRefund: int256, sharesRefund: int256)
event CompleteSets(sender: address: indexed, market: address: indexed, type: indexed, fxpAmount: int256, numOutcomes: int256, marketCreatorFee: int256, reportingFee: int256)
event MakeOrder(market: address: indexed, sender: address: indexed, type, fxpPrice: int256, fxpAmount: int256, outcome: int256, orderID: address, fxpMoneyEscrowed: int256, fxpSharesEscrowed: int256, tradeGroupID: int256)
event TakeOrder(market: address: indexed, outcome: int256: indexed, type: int256: indexed, orderId: address, price: int256, maker: address, taker:address, makerShares: int256, makerTokens: int256, takerShares: int256, takerTokens: int256)

# Trade types
macro BID: 1
macro ASK: 2

def any():
    assertNoValue()

def init():
    self.owner = msg.sender

def initialize(controller: address):
    require(msg.sender == self.owner)
    require(not self.initialized)
    self.initialized = 1
    self.controller = controller

# @public
# @return fxp
def getAmount(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].fxpAmount)

# @public
# @return fxp
def getPrice(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].fxpPrice)

# @public
def getOrderOwner(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].owner)

# @public
# @return fxp
def getVolume(market: address):
    return(self.marketOrderData[market].volume)

# @public
# @return fxp
def getLastOutcomePrice(market: address, outcome: int256):
    return(self.marketOrderData[market].prices[outcome])

# @public
def getBetterOrderID(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].betterOrderID: address)

# @public
def getWorseOrderID(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].worseOrderID: address)

# Get orders for a particular market, type, and outcome (chunked)
# @public
def getOrderIDs(type: int256, market: address, outcome: int256, startingOrderID: address, numOrdersToLoad: int256):
    require(type == BID or type == ASK)
    require(0 <= outcome and outcome < market.getNumberOfOutcomes())
    if(startingOrderID == 0):
        startingOrderID = self.bestOrder[market][outcome][type]
    orderIDs = array(numOrdersToLoad)
    orderIDs[0] = startingOrderID
    i = 0
    while(i < numOrdersToLoad and self.orders[market][outcome][type][orderIDs[i]].worseOrderID != 0):
        orderIDs[i + 1] = self.orders[market][outcome][type][orderIDs[i]].worseOrderID
        i += 1
    return(slice(orderIDs, items=0, items=i): arr)

# @public
def getOrder(orderID: address, type: int256, market: address, outcome: int256):
    order = array(8)
    order[ATTOSHARES] = self.orders[market][outcome][type][orderID].fxpAmount
    order[DISPLAY_PRICE] = self.orders[market][outcome][type][orderID].fxpPrice
    order[OWNER] = self.orders[market][outcome][type][orderID].owner
    order[TOKENS_ESCROWED] = self.orders[market][outcome][type][orderID].fxpMoneyEscrowed
    order[SHARES_ESCROWED] = self.orders[market][outcome][type][orderID].fxpSharesEscrowed
    order[BETTER_ORDER_ID] = self.orders[market][outcome][type][orderID].betterOrderID
    order[WORSE_ORDER_ID] = self.orders[market][outcome][type][orderID].worseOrderID
    order[GAS_PRICE] = self.orders[market][outcome][type][orderID].gasPrice
    return(order: arr)

# @public
def getGasPrice(orderID: address, type: int256, market: address, outcome: int256):
    return(self.orders[market][outcome][type][orderID].gasPrice)

# @public
def getBestOrderID(type: int256, market: address, outcome: int256):
    return(self.bestOrder[market][outcome][type]: address)

# @public
def getWorstOrderID(type: int256, market: address, outcome: int256):
    return(self.worstOrder[market][outcome][type]: address)

# @public
def isBetterPrice(type: int256, market: address, outcome: int256, fxpPrice, orderID: address):
    if(type == BID):
        return((fxpPrice > self.orders[market][outcome][type][orderID].fxpPrice))
    else:
        return((fxpPrice < self.orders[market][outcome][type][orderID].fxpPrice))

# @public
def isWorsePrice(type: int256, market: address, outcome: int256, fxpPrice, orderID: address):
    if(type == BID):
        return((fxpPrice < self.orders[market][outcome][type][orderID].fxpPrice))
    else:
        return((fxpPrice > self.orders[market][outcome][type][orderID].fxpPrice))

# @public
def assertIsNotBetterPrice(type: int256, market: address, outcome: int256, fxpPrice, betterOrderID: address):
    require(not self.isBetterPrice(type, market, outcome, fxpPrice, betterOrderID))
    return(1)

# @public
def assertIsNotWorsePrice(type: int256, market: address, outcome: int256, fxpPrice, worseOrderID: address):
    require(not self.isWorsePrice(type, market, outcome, fxpPrice, worseOrderID))
    return(1)

# @public
def ascendOrderList(type: int256, market: address, outcome: int256, fxpPrice, lowestOrderID: address):
    worseOrderID = lowestOrderID
    if(type == BID):
        isWorstPrice = fxpPrice <= self.orders[market][outcome][type][worseOrderID].fxpPrice
    else:
        isWorstPrice = fxpPrice >= self.orders[market][outcome][type][worseOrderID].fxpPrice
    if(isWorstPrice):
        return([worseOrderID, self.orders[market][outcome][type][worseOrderID].worseOrderID]: arr)
    isBetterPrice = self.isBetterPrice(type, market, outcome, fxpPrice, worseOrderID)
    while(isBetterPrice and self.orders[market][outcome][type][worseOrderID].betterOrderID != 0 and fxpPrice != self.orders[market][outcome][type][self.orders[market][outcome][type][worseOrderID].betterOrderID].fxpPrice):
        isBetterPrice = self.isBetterPrice(type, market, outcome, fxpPrice, self.orders[market][outcome][type][worseOrderID].betterOrderID)
        if(isBetterPrice):
            worseOrderID = self.orders[market][outcome][type][worseOrderID].betterOrderID
    betterOrderID = self.orders[market][outcome][type][worseOrderID].betterOrderID
    return([betterOrderID, worseOrderID]: arr)

# @public
def descendOrderList(type: int256, market: address, outcome: int256, fxpPrice, highestOrderID: address):
    betterOrderID = highestOrderID
    if(type == BID):
        isBestPrice = fxpPrice > self.orders[market][outcome][type][betterOrderID].fxpPrice
    else:
        isBestPrice = fxpPrice < self.orders[market][outcome][type][betterOrderID].fxpPrice
    if(isBestPrice):
        return([0, betterOrderID]: arr)
    if(fxpPrice == self.orders[market][outcome][type][betterOrderID].fxpPrice):
        return([betterOrderID, self.orders[market][outcome][type][betterOrderID].worseOrderID]: arr)
    isWorsePrice = self.isWorsePrice(type, market, outcome, fxpPrice, betterOrderID)
    while(isWorsePrice and self.orders[market][outcome][type][betterOrderID].worseOrderID != 0):
        isWorsePrice = self.isWorsePrice(type, market, outcome, fxpPrice, self.orders[market][outcome][type][betterOrderID].worseOrderID)
        if(isWorsePrice or fxpPrice == self.orders[market][outcome][type][self.orders[market][outcome][type][betterOrderID].worseOrderID].fxpPrice):
            betterOrderID = self.orders[market][outcome][type][betterOrderID].worseOrderID
    worseOrderID = self.orders[market][outcome][type][betterOrderID].worseOrderID
    return([betterOrderID, worseOrderID]: arr)

# @public
def findBoundingOrders(type: int256, market: address, outcome: int256, fxpPrice: int256, bestOrderID: address, worstOrderID: address, betterOrderID: address, worseOrderID: address):
    if(bestOrderID == worstOrderID):
        if(bestOrderID == 0):
            return([0, 0]: arr)
        elif(self.isBetterPrice(type, market, outcome, fxpPrice, bestOrderID)):
            return([0, bestOrderID]: arr)
        else:
            return([bestOrderID, 0]: arr)
    if(betterOrderID != 0):
        if(self.orders[market][outcome][type][betterOrderID].fxpAmount == 0):
            betterOrderID = 0
        else:
            self.assertIsNotBetterPrice(type, market, outcome, fxpPrice, betterOrderID)
    if(worseOrderID != 0):
        if(self.orders[market][outcome][type][worseOrderID].fxpAmount == 0):
            worseOrderID = 0
        else:
            self.assertIsNotWorsePrice(type, market, outcome, fxpPrice, worseOrderID)
    if(betterOrderID == 0 and worseOrderID == 0):
        return(self.descendOrderList(type, market, outcome, fxpPrice, bestOrderID, outitems=2): arr)
    elif(betterOrderID == 0):
        return(self.ascendOrderList(type, market, outcome, fxpPrice, worseOrderID, outitems=2): arr)
    elif(worseOrderID == 0):
        return(self.descendOrderList(type, market, outcome, fxpPrice, betterOrderID, outitems=2): arr)
    if(self.orders[market][outcome][type][betterOrderID].worseOrderID != worseOrderID):
        return(self.descendOrderList(type, market, outcome, fxpPrice, betterOrderID, outitems=2): arr)
    elif(self.orders[market][outcome][type][worseOrderID].betterOrderID != betterOrderID):
        return(self.ascendOrderList(type, market, outcome, fxpPrice, worseOrderID, outitems=2): arr)
    return([betterOrderID, worseOrderID]: arr)

# @internal
def insertOrderIntoList(orderID: address, type: int256, market: address, outcome: int256, fxpPrice: int256, betterOrderID: address, worseOrderID: address):
    self.controller.assertIsWhitelisted(msg.sender)
    bestOrderID = self.bestOrder[market][outcome][type]
    worstOrderID = self.worstOrder[market][outcome][type]
    boundingOrders = self.findBoundingOrders(type, market, outcome, fxpPrice, bestOrderID, worstOrderID, betterOrderID, worseOrderID, outitems=2)
    betterOrderID = boundingOrders[0]
    worseOrderID = boundingOrders[1]
    if(type == BID):
        bestOrderID = self.updateBestBidOrder(orderID, market, fxpPrice, outcome, betterOrderID)
        worstOrderID = self.updateWorstBidOrder(orderID, market, fxpPrice, outcome, worseOrderID)
    else:
        bestOrderID = self.updateBestAskOrder(orderID, market, fxpPrice, outcome, betterOrderID)
        worstOrderID = self.updateWorstAskOrder(orderID, market, fxpPrice, outcome, worseOrderID)
    if(bestOrderID == orderID):
        betterOrderID = 0
    if(worstOrderID == orderID):
        worseOrderID = 0
    if(betterOrderID != 0):
        self.orders[market][outcome][type][betterOrderID].worseOrderID = orderID
        self.orders[market][outcome][type][orderID].betterOrderID = betterOrderID
    if(worseOrderID != 0):
        self.orders[market][outcome][type][worseOrderID].betterOrderID = orderID
        self.orders[market][outcome][type][orderID].worseOrderID = worseOrderID
    return(1)

# @internal
def saveOrder(orderID: address, type: int256, market: address, fxpAmount: int256, fxpPrice: int256, sender: address, outcome: int256, fxpMoneyEscrowed: int256, fxpSharesEscrowed: int256, betterOrderID: address, worseOrderID: address, tradeGroupID: int256, gasPrice: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    require(type == BID or type == ASK)
    require(0 <= outcome and outcome < market.getNumberOfOutcomes())
    self.insertOrderIntoList(orderID, type, market, outcome, fxpPrice, betterOrderID, worseOrderID)
    self.orders[market][outcome][type][orderID].fxpPrice = fxpPrice
    self.orders[market][outcome][type][orderID].fxpAmount = fxpAmount
    self.orders[market][outcome][type][orderID].owner = sender
    self.orders[market][outcome][type][orderID].fxpMoneyEscrowed = fxpMoneyEscrowed
    self.orders[market][outcome][type][orderID].fxpSharesEscrowed = fxpSharesEscrowed
    self.orders[market][outcome][type][orderID].gasPrice = gasPrice
    log(type=MakeOrder, market, sender, type, fxpPrice, fxpAmount, outcome, orderID, fxpMoneyEscrowed, fxpSharesEscrowed, tradeGroupID)
    return(1)

# @internal
def removeOrder(orderID: address, type: int256, market: address, outcome: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    require(tx.gasprice <= self.orders[market][outcome][type][orderID].gasPrice)
    self.removeOrderFromList(orderID, type, market, outcome)
    self.orders[market][outcome][type][orderID].fxpPrice = 0
    self.orders[market][outcome][type][orderID].fxpAmount = 0
    self.orders[market][outcome][type][orderID].owner = 0
    self.orders[market][outcome][type][orderID].fxpMoneyEscrowed = 0
    self.orders[market][outcome][type][orderID].fxpSharesEscrowed = 0
    self.orders[market][outcome][type][orderID].gasPrice = 0
    return(1)

# @internal
def fillOrder(orderId: address, orderType: int256, market: address, orderOutcome: int256, sharesFilled: int256, tokensFilled: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    require(market)
    require(0 <= orderOutcome and orderOutcome < market.getNumberOfOutcomes())
    require(orderType == BID or orderType == ASK)
    require(orderId)
    require(sharesFilled <= self.orders[market][orderOutcome][orderType][orderId].fxpSharesEscrowed)
    require(tokensFilled <= self.orders[market][orderOutcome][orderType][orderId].fxpMoneyEscrowed)
    require(tx.gasprice <= self.orders[market][orderOutcome][orderType][orderId].gasPrice)
    require(self.orders[market][orderOutcome][orderType][orderId].fxpPrice <= market.getMaxDisplayPrice())
    require(self.orders[market][orderOutcome][orderType][orderId].fxpPrice >= market.getMinDisplayPrice())
    require(market.getMaxDisplayPrice() + market.getMinDisplayPrice() <= 2**254)
    fill = 0
    if orderType == BID:
        # We can't use safeSub here because it disallows subtracting negative numbers. Worst case here is an operation of 2**254 - 1 as required above, which won't overflow
        fill = sharesFilled + safeFxpDiv(tokensFilled, self.orders[market][orderOutcome][orderType][orderId].fxpPrice - market.getMinDisplayPrice())
    if orderType == ASK:
        # We can't use safeSub here because it disallows subtracting negative numbers. Worst case here is an operation of 2**254 - 1 as required above, which won't overflow
        fill = sharesFilled + safeFxpDiv(tokensFilled, market.getMaxDisplayPrice() - self.orders[market][orderOutcome][orderType][orderId].fxpPrice)
    require(fill <= self.orders[market][orderOutcome][orderType][orderId].fxpAmount)
    self.orders[market][orderOutcome][orderType][orderId].fxpAmount -= fill
    self.orders[market][orderOutcome][orderType][orderId].fxpMoneyEscrowed -= tokensFilled
    self.orders[market][orderOutcome][orderType][orderId].fxpSharesEscrowed -= sharesFilled
    if self.orders[market][orderOutcome][orderType][orderId].fxpAmount == 0:
        require(self.orders[market][orderOutcome][orderType][orderId].fxpMoneyEscrowed == 0)
        require(self.orders[market][orderOutcome][orderType][orderId].fxpSharesEscrowed == 0)
        self.removeOrderFromList(orderId, orderType, market, orderOutcome)
        self.orders[market][orderOutcome][orderType][orderId].fxpPrice = 0
        self.orders[market][orderOutcome][orderType][orderId].owner = 0
        self.orders[market][orderOutcome][orderType][orderId].gasPrice = 0
        self.orders[market][orderOutcome][orderType][orderId].betterOrderID = 0
        self.orders[market][orderOutcome][orderType][orderId].worseOrderID = 0
    return(1)

# @internal
def takeOrderLog(market: address, orderOutcome: int256, orderType: int256, orderId: address, taker: address, makerSharesFilled: int256, makerTokensFilled: int256, takerSharesFilled: int256, takerTokensFilled: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    price = self.orders[market][orderOutcome][orderType][orderId].fxpPrice
    maker = self.orders[market][orderOutcome][orderType][orderId].owner
    log(type=TakeOrder, market, orderOutcome, orderType, orderId, price, maker, taker, makerSharesFilled, makerTokensFilled, takerSharesFilled, takerTokensFilled)
    return(1)

# @internal
def completeSetsLog(sender, market, type, fxpAmount, numOutcomes, marketCreatorFee, reportingFee):
    self.controller.assertIsWhitelisted(msg.sender)
    log(type=CompleteSets, sender, market, type, fxpAmount, numOutcomes, marketCreatorFee, reportingFee)
    return(1)

# @internal
def cancelOrderLog(market, sender, fxpPrice, fxpAmount, orderID, outcome, type, fxpMoneyEscrowed, fxpSharesEscrowed):
    self.controller.assertIsWhitelisted(msg.sender)
    log(type=CancelOrder, market, sender, fxpPrice, fxpAmount, orderID, outcome, type, fxpMoneyEscrowed, fxpSharesEscrowed)
    return(1: uint256)

# @internal
def modifyMarketVolume(market: address, fxpAmount: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    self.marketOrderData[market].volume += fxpAmount
    market.getBranch().getTopics().updatePopularity(market.getTopic(), fxpAmount)
    return(1)

# @internal
def setPrice(market: address, outcome: int256, fxpPrice: int256):
    self.controller.assertIsWhitelisted(msg.sender)
    self.marketOrderData[market].prices[outcome] = fxpPrice
    return(1: uint256)

# @private
def removeOrderFromList(orderID: address, type: int256, market: address, outcome: int256):
    assertPrivateCall()
    betterOrderID = self.orders[market][outcome][type][orderID].betterOrderID
    worseOrderID = self.orders[market][outcome][type][orderID].worseOrderID
    if(self.bestOrder[market][outcome][type] == orderID):
        self.bestOrder[market][outcome][type] = worseOrderID
    if(self.worstOrder[market][outcome][type] == orderID):
        self.worstOrder[market][outcome][type] = betterOrderID
    if(betterOrderID != 0):
        self.orders[market][outcome][type][betterOrderID].worseOrderID = worseOrderID
    if(worseOrderID != 0):
        self.orders[market][outcome][type][worseOrderID].betterOrderID = betterOrderID
    self.orders[market][outcome][type][orderID].betterOrderID = 0
    self.orders[market][outcome][type][orderID].worseOrderID = 0
    return(1)

# If best bid is not set or price higher than best bid price, this order is the new best bid.
# @private
def updateBestBidOrder(orderID: address, market: address, fxpPrice: int256, outcome: int256, betterOrderID: int256):
    assertPrivateCall()
    bestBidOrderID = self.bestOrder[market][outcome][BID]
    if(bestBidOrderID == 0 or fxpPrice > self.orders[market][outcome][BID][bestBidOrderID].fxpPrice):
        self.bestOrder[market][outcome][BID] = orderID
    return(self.bestOrder[market][outcome][BID]: address)

# If worst bid is not set or price lower than worst bid price, this order is the new worst bid.
# @private
def updateWorstBidOrder(orderID: address, market: address, fxpPrice: int256, outcome: int256, worseOrderID: int256):
    assertPrivateCall()
    worstBidOrderID = self.worstOrder[market][outcome][BID]
    if(worstBidOrderID == 0 or fxpPrice < self.orders[market][outcome][BID][worstBidOrderID].fxpPrice):
        self.worstOrder[market][outcome][BID] = orderID
    return(self.worstOrder[market][outcome][BID]: address)

# If best ask is not set or price lower than best ask price, this order is the new best ask.
# @private
def updateBestAskOrder(orderID: address, market: address, fxpPrice: int256, outcome: int256, betterOrderID: int256):
    assertPrivateCall()
    bestAskOrderID = self.bestOrder[market][outcome][ASK]
    if(bestAskOrderID == 0 or fxpPrice < self.orders[market][outcome][ASK][bestAskOrderID].fxpPrice):
        self.bestOrder[market][outcome][ASK] = orderID
    return(self.bestOrder[market][outcome][ASK]: address)

# If worst ask is not set or price higher than worst ask price, this order is the new worst ask.
# @private
def updateWorstAskOrder(orderID: address, market: address, fxpPrice: int256, outcome: int256, worseOrderID: int256):
    assertPrivateCall()
    worstAskOrderID = self.worstOrder[market][outcome][ASK]
    if(worstAskOrderID == 0 or fxpPrice > self.orders[market][outcome][ASK][worstAskOrderID].fxpPrice):
        self.worstOrder[market][outcome][ASK] = orderID
    return(self.worstOrder[market][outcome][ASK]: address)

# @controller
def setController(newController: address):
    require(msg.sender == self.controller)
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    require(msg.sender == self.controller)
    suicide(to)
