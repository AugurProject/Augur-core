
macro ORDERS: self.controller.lookup('orders')

inset('../macros/externs.sem')
inset('../macros/require.sem')
inset('../macros/safeMath.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/orderFields.sem')

# Trade types
macro BID: 1
macro ASK: 2

data controller
data owner
data initialized

def init():
    self.owner = msg.sender

def any():
    assertNoValue()

def initialize(controller: address):
    require(msg.sender == self.owner)
    require(not self.initialized)
    self.initialized = 1
    self.controller = controller

# Get orders for a particular market, type, and outcome (chunked)
# @public
def getOrderIDs(type: int256, market: address, outcome: int256, startingOrderID: address, numOrdersToLoad: int256):
    require(type == BID or type == ASK)
    require(0 <= outcome and outcome < market.getNumberOfOutcomes())
    if(startingOrderID == 0):
        startingOrderID = ORDERS.getBestOrderID(type, market, outcome)
    orderIDs = array(numOrdersToLoad)
    orderIDs[0] = startingOrderID
    i = 0
    while(i < numOrdersToLoad and ORDERS.getWorseOrderID(orderIDs[i], type, market, outcome) != 0):
        orderIDs[i + 1] = ORDERS.getWorseOrderID(orderIDs[i], type, market, outcome)
        i += 1
    return(slice(orderIDs, items=0, items=i): arr)

# @public
def getOrder(orderID: address, type: int256, market: address, outcome: int256):
    order = array(8)
    order[ATTOSHARES] = ORDERS.getAmount(orderID, type, market, outcome)
    order[DISPLAY_PRICE] = ORDERS.getPrice(orderID, type, market, outcome)
    order[OWNER] = ORDERS.getOrderOwner(orderID, type, market, outcome)
    order[TOKENS_ESCROWED] = ORDERS.getOrderMoneyEscrowed(orderID, type, market, outcome)
    order[SHARES_ESCROWED] = ORDERS.getOrderSharesEscrowed(orderID, type, market, outcome)
    order[BETTER_ORDER_ID] = ORDERS.getBetterOrderID(orderID, type, market, outcome)
    order[WORSE_ORDER_ID] = ORDERS.getWorseOrderID(orderID, type, market, outcome)
    order[GAS_PRICE] = ORDERS.getGasPrice(orderID, type, market, outcome)
    return(order: arr)

# @public
def ascendOrderList(type: int256, market: address, outcome: int256, fxpPrice, lowestOrderID: address):
    worseOrderID = lowestOrderID
    if(type == BID):
        isWorstPrice = fxpPrice <= ORDERS.getPrice(worseOrderID, type, market, outcome)
    else:
        isWorstPrice = fxpPrice >= ORDERS.getPrice(worseOrderID, type, market, outcome)
    if(isWorstPrice):
        return([worseOrderID, ORDERS.getWorseOrderID(worseOrderID, type, market, outcome)]: arr)
    isBetterPrice = ORDERS.isBetterPrice(type, market, outcome, fxpPrice, worseOrderID)
    while(isBetterPrice and ORDERS.getBetterOrderID(worseOrderID, type, market, outcome) != 0 and fxpPrice != ORDERS.getPrice(ORDERS.getBetterOrderID(worseOrderID, type, market, outcome), type, market, outcome)):
        isBetterPrice = ORDERS.isBetterPrice(type, market, outcome, fxpPrice, ORDERS.getBetterOrderID(worseOrderID, type, market, outcome))
        if(isBetterPrice):
            worseOrderID = ORDERS.getBetterOrderID(worseOrderID, type, market, outcome)
    betterOrderID = ORDERS.getBetterOrderID(worseOrderID, type, market, outcome)
    return([betterOrderID, worseOrderID]: arr)

# @public
def descendOrderList(type: int256, market: address, outcome: int256, fxpPrice, highestOrderID: address):
    betterOrderID = highestOrderID
    if(type == BID):
        isBestPrice = fxpPrice > ORDERS.getPrice(betterOrderID, type, market, outcome)
    else:
        isBestPrice = fxpPrice < ORDERS.getPrice(betterOrderID, type, market, outcome)
    if(isBestPrice):
        return([0, betterOrderID]: arr)
    if(fxpPrice == ORDERS.getPrice(betterOrderID, type, market, outcome)):
        return([betterOrderID, ORDERS.getWorseOrderID(betterOrderID, type, market, outcome)]: arr)
    isWorsePrice = ORDERS.isWorsePrice(type, market, outcome, fxpPrice, betterOrderID)
    while(isWorsePrice and ORDERS.getWorseOrderID(betterOrderID, type, market, outcome) != 0):
        isWorsePrice = ORDERS.isWorsePrice(type, market, outcome, fxpPrice, ORDERS.getWorseOrderID(betterOrderID, type, market, outcome))
        if(isWorsePrice or fxpPrice == ORDERS.getPrice(ORDERS.getWorseOrderID(betterOrderID, type, market, outcome), type, market, outcome)):
            betterOrderID = ORDERS.getWorseOrderID(betterOrderID, type, market, outcome)
    worseOrderID = ORDERS.getWorseOrderID(betterOrderID, type, market, outcome)
    return([betterOrderID, worseOrderID]: arr)

# @public
def findBoundingOrders(type: int256, market: address, outcome: int256, fxpPrice: int256, bestOrderID: address, worstOrderID: address, betterOrderID: address, worseOrderID: address):
    if(bestOrderID == worstOrderID):
        if(bestOrderID == 0):
            return([0, 0]: arr)
        elif(ORDERS.isBetterPrice(type, market, outcome, fxpPrice, bestOrderID)):
            return([0, bestOrderID]: arr)
        else:
            return([bestOrderID, 0]: arr)
    if(betterOrderID != 0):
        if(ORDERS.getPrice(betterOrderID, type, market, outcome) == 0):
            betterOrderID = 0
        else:
            ORDERS.assertIsNotBetterPrice(type, market, outcome, fxpPrice, betterOrderID)
    if(worseOrderID != 0):
        if(ORDERS.getPrice(worseOrderID, type, market, outcome) == 0):
            worseOrderID = 0
        else:
            ORDERS.assertIsNotWorsePrice(type, market, outcome, fxpPrice, worseOrderID)
    if(betterOrderID == 0 and worseOrderID == 0):
        return(self.descendOrderList(type, market, outcome, fxpPrice, bestOrderID, outitems=2): arr)
    elif(betterOrderID == 0):
        return(self.ascendOrderList(type, market, outcome, fxpPrice, worseOrderID, outitems=2): arr)
    elif(worseOrderID == 0):
        return(self.descendOrderList(type, market, outcome, fxpPrice, betterOrderID, outitems=2): arr)
    if(ORDERS.getWorseOrderID(betterOrderID, type, market, outcome) != worseOrderID):
        return(self.descendOrderList(type, market, outcome, fxpPrice, betterOrderID, outitems=2): arr)
    elif(ORDERS.getBetterOrderID(worseOrderID, type, market, outcome) != betterOrderID):
        return(self.ascendOrderList(type, market, outcome, fxpPrice, worseOrderID, outitems=2): arr)
    return([betterOrderID, worseOrderID]: arr)