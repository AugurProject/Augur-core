#### must be first data members to match delegator.se
data controller
data controllerLookupName
####

data collection[](prev, next, value)
data values[]
data count
data head
data tail
data nextId
data owner
data initialized

inset('../macros/require.sem')

def any():
    if (self.initialized):
        require(msg.sender == self.owner or msg.sender == self)

def initialize(owner: address):
    require(not self.initialized)
    self.initialized = 1
    self.owner = owner
    return(1)

def push(value):
    itemId = self.nextId
    self.nextId += 1
    self.values[value] = itemId
    self.collection[itemId].value = value
    self.collection[itemId].prev = self.head
    self.head = itemId
    if (not self.tail):
        self.tail = itemId
    self.count += 1
    self.assertInvariants()
    return(1)

def pop():
    self.assertNotEmpty()
    index = self.head
    value = self.collection[index].value
    prev = self.collection[index].prev
    self.values[index] = 0
    self.collection[index].prev = 0
    self.collection[index].value = 0
    self.head = prev
    if (self.tail == index):
        self.tail = 0
    self.count -= 1
    self.assertInvariants()
    return(value)

def insertAfter(previousItem, newItem):
    self.assertContains(previousItem)
    itemId = self.nextId
    self.nextId += 1
    prev = self.values[previousItem]
    next = self.collection[previousIndex].next
    self.values[value] = itemId
    self.collection[itemId].value = value
    self.collection[itemId].prev = prev
    self.collection[prev].next = itemId
    if (next):
        self.collection[itemId].next = next
        self.collection[next].prev = itemId
    else:
        self.head = itemId
    self.count += 1
    self.assertInvariants()
    return(1)

def insertBefore(nextItem, newItem):
    self.assertContains(nextItem)
    itemId = self.nextId
    self.nextId += 1
    next = self.values[nextItem]
    prev = self.collection[next].prev
    self.values[value] = itemId
    self.collection[itemId].value = value
    self.collection[itemId].next = next
    self.collection[next].prev = itemId
    if (prev):
        self.collection[itemId].prev = prev
        self.collection[prev].next = itemId
    else:
        self.tail = itemId
    self.count += 1
    self.assertInvariants()
    return(1)

def getHead():
    return(self.collection[self.head].value)

def getNext(item):
    self.assertContains(item)
    index = self.values[item]
    nextIndex = self.collection[index].next
    return(self.collection[nextIndex].value)

def getPrev(item):
    index = self.values[item]
    prevIndex = self.collection[index].prev
    return(self.collection[prevIndex].value)

def contains(item):
    return(self.values[value] != 0)

def assertContains(item):
    if (self.contains(item)):
        ~invalid()

def assertEmpty():
    if (self.count != 0):
        ~invalid()

def assertNotEmpty():
    if (self.count == 0):
        ~invalid()

def assertInvariants():
    if (not self.head):
        if (self.tail):
            ~invalid()
        if (self.count):
            ~invalid()
    if (not self.tail):
        if (self.head):
            ~invalid()
        if (self.count):
            ~invalid()
    if (not self.count):
        if (self.head):
            ~invalid()
        if (self.tail):
            ~invalid()
