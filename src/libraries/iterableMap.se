#### must be first data members to match delegator.se
data controller
data controllerLookupName
####

inset('../macros/require.sem')

data owner
data initialized
data itemsArray[]
data itemsMap[](hasValue, value, offset)
data numberOfItems

def any():
    if (self.initialized):
        require(msg.sender == self.owner or msg.sender == self)

def initialize(owner: address):
    require(not self.initialized)
    self.initialized = 1
    self.owner = owner
    return(1)

def add(key, value):
    require(not self.contains(key))
    self.itemsArray[self.numberOfItems] = key
    self.itemsMap[key].hasValue = 1
    self.itemsMap[key].value = value
    self.itemsMap[key].offset = self.numberOfItems
    self.numberOfItems += 1
    return(1)

def update(key, value):
    require(self.contains(key))
    self.itemsMap[key].value = value
    return(1)

def addOrUpdate(key, value):
    if not self.contains(key):
        self.add(key, value)
    else:
        self.update(key, value)

def remove(key):
    require(self.contains(key))
    keyRemovedOffset = self.itemsMap[key].offset
    self.itemsArray[keyRemovedOffset] = 0
    self.itemsMap[key].hasValue = 0
    self.itemsMap[key].value = 0
    self.itemsMap[key].offset = 0
    if(self.numberOfItems > 1 and keyRemovedOffset != (self.numberOfItems - 1)):
        # move tail item in collection to the newly opened slot from the key we just removed if not last or only item being removed
        tailItemKey = self.getByOffset(self.numberOfItems - 1)
        self.itemsArray[self.numberOfItems - 1] = 0
        self.itemsArray[keyRemovedOffset] = tailItemKey
        self.itemsMap[tailItemKey].offset = self.numberOfItems - 2
    self.numberOfItems -= 1

def getByKeyOrZero(key):
    return self.itemsMap[key].value

def getByKey(key):
    require(self.itemsMap[key].hasValue)
    return self.itemsMap[key].value

def getByOffset(offset):
    require(0 <= offset and offset < self.numberOfItems)
    return self.itemsArray[offset]

def contains(key):
    if self.itemsMap[key].hasValue:
        return 1
    else:
        return 0

def count():
    return self.numberOfItems
