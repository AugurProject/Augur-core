macro OFFSET: 6

# Metadata is indexed by market ID.
data Metadata[](tag1, tag2, tag3, sourceLength, source[2048], linksLength, links[2048])

# @param {int} market Market ID
# @param {int} tag{1,2,3} Category tags (short string=int)
# @param {bytes} source Expiry source
# @param {bytes} links Helpful external links
# @return int 1 complete
def setMetadata(market, tag1, tag2, tag3, source:str, links:str):
    self.Metadata[market].tag1 = tag1
    self.Metadata[market].tag2 = tag2
    self.Metadata[market].tag3 = tag3
    sourceLength = len(source)
    self.Metadata[market].sourceLength = sourceLength
    save(self.Metadata[market].source[0], source, chars=sourceLength)
    linksLength = len(links)
    self.Metadata[market].linksLength = linksLength
    save(self.Metadata[market].links[0], links, chars=linksLength)
    return(1)

# @param {int} market Market ID
# @return int[] Concatenated market metadata
def getMetadata(market):
    sourceLength = self.Metadata[market].sourceLength
    linksLength = self.Metadata[market].linksLength
    metadata = array(OFFSET + sourceLength + linksLength)
    metadata[0] = self.Metadata[market].tag1
    metadata[1] = self.Metadata[market].tag2
    metadata[2] = self.Metadata[market].tag3
    metadata[3] = sourceLength
    metadata[4] = linksLength
    source = load(self.Metadata[market].source[0], chars=sourceLength)
    c = 0
    while c < sourceLength:
        metadata[OFFSET + c] = getch(source, c)
        c += 1
    index = OFFSET + sourceLength
    links = load(self.Metadata[market].links[0], chars=linksLength)
    c = 0
    while c < linksLength:
        metadata[index + c] = getch(links, c)
        c += 1
    return(metadata:arr)
