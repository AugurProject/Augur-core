import markets as MARKETS
import cash as CASH
import events as EVENTS

# # of winningOutcomes is 2
def twoOutcomes(market, winningOutcome: arr, events: arr):
    # look for the scalar
    scalar = 0
    if(((EVENTS.getMaxValue(events[0])!=2 || EVENTS.getMinValue(events[0])!=1) && EVENTS.getNumOutcomes(events[0])==2) || EVENTS.getOutcome(events[0])==3*2^63):
        scalar = 0
    elif(((EVENTS.getMaxValue(events[1])!=2 || EVENTS.getMinValue(events[1])!=1) && EVENTS.getNumOutcomes(events[1])==2) || EVENTS.getOutcome(events[1])==3*2^63):
        scalar = 1
    elif(((EVENTS.getMaxValue(events[2])!=2 || EVENTS.getMinValue(events[2])!=1) && EVENTS.getNumOutcomes(events[2])==2) || EVENTS.getOutcome(events[2])==3*2^63):
        scalar = 2
    outcome = EVENTS.getOutcome(events[scalar])
    minValue = EVENTS.getMinValue(events[scalar])
    maxValue = EVENTS.getMaxValue(events[scalar])
    if(outcome>maxValue):
        outcome = maxValue
    elif(outcome<minValue):
        outcome = minValue
    # price is in fixed point
    # share two goes with the high side
    pricePerShare2 = 2^64*(outcome - 2^64*minValue) / (2^64*maxValue - 2^64*minValue)
    #share one goes with the low side of the calc
    pricePerShare1 = 2^64 - pricePerShare2
    # distribute cashcoin to the people who won money by holding winning shares
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    if(participantNumber == -1):
        return(-1)
    participant = MARKETS.getParticipantID(market, participantNumber)
    # for each winning outcome do...
    n = 0
    while(winningOutcome[n]!=0):
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, participantNumber, winningOutcome[n])
        MARKETS.modifyParticipantShares(MARKETS.getBranchID(market), market, participantNumber, winningOutcome[n], -sharesOwned)
        # low side
        if(n==0):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)*pricePerShare1/2^64)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)*pricePerShare1/2^64)
        # high side (of the scalar part)
        elif(n==1):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)*pricePerShare2/2^64)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)*pricePerShare2/2^64)
        n+=1
    return(1)
    
def valueCalcTwo(market, winningOutcome: arr, events: arr):
    # look for the scalar
    scalar = 0
    if(((EVENTS.getMaxValue(events[0])!=2 || EVENTS.getMinValue(events[0])!=1) && EVENTS.getNumOutcomes(events[0])==2) || EVENTS.getOutcome(events[0])==3*2^63):
        scalar = 0
    elif(((EVENTS.getMaxValue(events[1])!=2 || EVENTS.getMinValue(events[1])!=1) && EVENTS.getNumOutcomes(events[1])==2) || EVENTS.getOutcome(events[1])==3*2^63):
        scalar = 1
    elif(((EVENTS.getMaxValue(events[2])!=2 || EVENTS.getMinValue(events[2])!=1) && EVENTS.getNumOutcomes(events[2])==2) || EVENTS.getOutcome(events[2])==3*2^63):
        scalar = 2
    outcome = EVENTS.getOutcome(events[scalar])
    minValue = EVENTS.getMinValue(events[scalar])
    maxValue = EVENTS.getMaxValue(events[scalar])
    if(outcome>maxValue):
        outcome = maxValue
    elif(outcome<minValue):
        outcome = minValue
    # price is in fixed point
    # share two goes with the high side
    pricePerShare2 = 2^64*(outcome - 2^64*minValue) / (2^64*maxValue - 2^64*minValue)
    #share one goes with the low side of the calc
    pricePerShare1 = 2^64 - pricePerShare1
    cumScale = MARKETS.getCumScale(market)
    sharesTotal1 = MARKETS.getSharesPurchased(market, winningOutcome[0]) - MARKETS.initialLiquidityAmount(market, winningOutcome[0])
    sharesTotal2 = MARKETS.getSharesPurchased(market, winningOutcome[1]) - MARKETS.initialLiquidityAmount(market, winningOutcome[1])
    value = sharesTotal1*cumScale*pricePerShare1/2**64 + sharesTotal2*cumScale*pricePerShare2/2**64
    return(value)
