# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import reporting as REPORTING
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS

event updatePrice(user:indexed, market:indexed, outcome:indexed, price, cost)

# market, reporter
data trades[][](hash, block)

def commitTrade(market, hash):
    self.trades[market][tx.origin].hash = hash
    self.trades[market][tx.origin].block = block.number
    return(1)
    
def makeMarketHash(market, outcome, amount, limit):
    buyInfo = array(4)
    buyInfo[0] = market
    buyInfo[1] = outcome
    buyInfo[2] = amount
    buyInfo[3] = limit
    buyHash = sha256(buyInfo, items=4)
    return(buyHash)

# amount of shares should be fixed point
# @return return price + fee to buy shares
# Error messages otherwise
    # -1: invalid outcome or trading closed
    # -2: entered a -amt of shares
    # -3: not enough money / limit order too low
    # -4: invalid outcome
    # -5: bad commitment or no commitment
    # -6: oracle only branch, no trading
def buyShares(branch, market, outcome, amount, limit):
    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)

    if(BRANCHES.getOracleOnly(branch)):
        return(-6)

    buyInfo = array(4)
    buyInfo[0] = market
    buyInfo[1] = outcome
    buyInfo[2] = amount
    buyInfo[3] = limit
    buyHash = sha256(buyInfo, items=4)
    if(self.trades[market][tx.origin].hash != buyHash || block.number == self.trades[market][tx.origin].block):
        return(-5)
    self.trades[market][tx.origin].hash = 0
    # make it so trader has locked in fee from buy, so if they sell and they bought when fee was low, they can sell with that low fee as opposed to a high one
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if(outcome > MARKETS.getMarketNumOutcomes(market) or outcome < 1):
        return(-4)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    ### TODO: check for .99 market here
    if (outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, amount)
    newCost = MARKETS.lsLmsr(market)
    if newCost <= oldCost:
        MARKETS.modifyShares(market, outcome, -amount)
        return(0)
    price = (newCost - oldCost)

    if(CASH.balance(tx.origin) < price*(MARKETS.getTradingFee(market) + 2^64)/2^64 or (limit!=0 and (price*2^64/amount)>limit)):
        MARKETS.modifyShares(market, outcome, -amount)
        return(-3)

    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)

    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)

    MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, amount)
    # send shares of the event to user address
    # if user doesn't have enough money, revert
    # send money from user acc. to market address/account
    # cost for shares
    CASH.send(market, price)
    # half of fees to market creator
    fee = MARKETS.getTradingFee(market)*price/2^64
    CASH.send(INFO.getCreator(market), fee/2)
    # other half go to branch
    CASH.send(branch, fee/2)
    # log new price & avg price paid/share
    log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), -(price+fee)*2^64/amount)
    return(1)

# amount is amount of shares to sell
# instead of inputting particip. num could just loop through array if dont have it
# @return error msg if fail, returns amount you get paid if success
# Error messages otherwise
    # -1: invalid outcome, trading closed, or you haven't traded in this market
    # -2: entered a -amt of shares
    # -3: you own no shares / limit price too high
    
    # -5: bad commitment or no commitment
    # -6: oracle only branch, no trading
def sellShares(branch, market, outcome, amount, limit):
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)
    sellInfo = array(4)
    sellInfo[0] = market
    sellInfo[1] = outcome
    sellInfo[2] = amount
    sellInfo[3] = limit
    sellHash = sha256(sellInfo, items=4)
    if(self.trades[market][tx.origin].hash != sellHash || block.number == self.trades[market][tx.origin].block):
        return(-5)
        
    self.trades[market][tx.origin].hash = 0

    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if(outcome > MARKETS.getMarketNumOutcomes(market) or outcome < 1):
        return(-4)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    if (MARKETS.getParticipantID(market, participantNumber) != tx.origin || outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, -amount)
    newCost = MARKETS.lsLmsr(market)
    if oldCost <= newCost:
        MARKETS.modifyShares(market, outcome, amount)
        return(-2)
    # these prices are in fixed point
    price = oldCost - newCost
    # remove shares from the user's account
    # if user actually doesn't have the shares, revert
    if (MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome) < amount or (limit!=0 and (price*2^64/amount)<limit)):
        MARKETS.modifyShares(market, outcome, amount)
        return(-3)
    else:
        # send bitcoin from the market to the user acc.
        CASH.subtractCash(market, price)
        fee = MARKETS.getTradingFee(market)*price/2^64
        # half of fees go to market creator
        CASH.addCash(INFO.getCreator(market), fee/2)
        # half go to branch
        CASH.addCash(branch, fee/2)
        price -= fee
        CASH.addCash(tx.origin, price)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, -amount)
        # log new price and avg. price sold / share
        log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), (price)*2^64/amount)
        return(1)