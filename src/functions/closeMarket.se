# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import events as EVENTS
import closeMarketOne as CLOSEONE
import closeMarketTwo as CLOSETWO
import closeMarketFour as CLOSEFOUR
import closeMarketEight as CLOSEEIGHT
import expiringEvents as EXPEVENTS
import makeReports as MAKEREPORTS
import eventResolution as RESOLVE

# first param is the market, second param is the subcurrency contract
data cash[][]

macro YES: 2^65
macro NO: 2^64
macro BAD: 3 * 2^63

macro CATCH_TOLERANCE: 2^64 / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < 2^63):
        0
    elif($x > 2^63):
        2^64
    else:
        0

# loop through events in the market, get their outcomes && use those to determine the winning events!
# distribute coins among winning events
# @return 0 if fail/trading not over yet/event not expired or closed already, if success 1
# Error messages otherwise
    # -1: Market has no cash anyway / already closed
    # -2: 0 outcome
    # -4: Outcome .5 once, pushback and retry
    # -6: bonded pushed forward market not ready to be resolved
    # -7: event not reportable >.99
#Use consistent 1 and 2 fixed point numbers as min and max for close market, make market, make event, buy/sell shares, and consensus on binary events - really, just use base 64 fixed point everywhere
def closeMarket(branch, market):
    if(CASH.balance(market)<=0):
        return(-1)
    numberEvents = MARKETS.getNumEvents(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    events = array(3)
    events = MARKETS.getMarketEvents(market, outitems=3)
    i = 0
    reportingDone = 0
    resolved = 1
    while i < numberEvents:
        if(EVENTS.getOutcome(events[i])==0 && EVENTS.getmode(events[i])==0):
            resolved = 0
            i = numberEvents
        i += 1
    i = 0
    while i < numberEvents:
        numReports = MAKEREPORTS.getNumReportsEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        numExpected = MAKEREPORTS.getNumReportsExpectedEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        if(numReports == numExpected && numReports!=0 && numExpected!=0):
            reportingDone = 1
            i = numberEvents
        i += 1
    if((period > tradingPeriod || reportingDone) && !resolved):
        # loop through events in the market, get their outcomes && use those to determine the winning events!
        n = 0
        outcomeFour = 0
        outcomeSix = 0
        while n < numberEvents:
            votingPeriodEvent = EVENTS.getExpiration(events[n])/BRANCHES.getPeriodLength(branch)
            fxpOutcome = EVENTS.getOutcome(events[n])
            resolution = 1
            if(MAKEREPORTS.getReportable(votingPeriodEvent, events[n])==-1):
                return(-7)
            if(EVENTS.getUncaughtOutcome(events[n])==0):
                return(-2)
            # TODO: if round 2 event && notFinal return 0
            if(binary(events[n]) && fxpOutcome==0):
                    resolution = RESOLVE.resolveBinary(events[n], market, branch, votingPeriodEvent, period)
            elif(scalar(events[n]) && EVENTS.getmode(events[n])==0):
                    resolution = RESOLVE.resolveCategoricalOrScalar(2^64*EVENTS.getMinValue(events[n]), 2^64*EVENTS.getMaxValue(events[n]), event, market, branch, votingPeriodEvent, period)
            elif(categorical(events[n]) && EVENTS.getmode(events[n])==0):
                    resolution = RESOLVE.resolveCategoricalOrScalar(2^64, 2^64*EVENTS.getNumOutcomes(events[n]), event, market, branch, votingPeriodEvent, period)
            if(resolution==-4):
                outcomeFour = 1
            elif(resolution==-6):
                outcomeSix = 1
            n += 1
        if(outcomeFour):
            return(-4)
        elif(outcomeSix):
            return(-6)
        winningOutcomes = array(8)
        winningOutcomes = RESOLVE.determineWinningOutcomes(events, numberEvents, branch, market, outitems=8)
        MARKETS.setWinningOutcomes(market, winningOutcomes)
        
        self.returnLiquidity(branch, market)
        return(1)
    else:
        return(0)

# @return 1 if success        
# Errors:
    # 0: reporting not done
    # -1: trader doesn't exist
def claimProceeds(branch, market):
    numberEvents = MARKETS.getNumEvents(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    events = array(3)
    events = MARKETS.getMarketEvents(market, outitems=3)
    i = 0
    reportingDone = 1
    resolved = 1
    while i < numberEvents:
        numReports = MAKEREPORTS.getNumReportsEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        numExpected = MAKEREPORTS.getNumReportsExpectedEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        if(EVENTS.getOutcome(events[i])==0 && EVENTS.getmode(events[i])==0):
            resolved = 0
        if(numReports != numExpected && numReports!=0 and numExpected!=0):
            reportingDone = 0
            i = numberEvents
        i += 1
    if((period > tradingPeriod || reportingDone) && resolved):
        winningOutcomes = array(8)
        winningOutcomes = MARKET.getWinningOutcomes(market, outitems=8)
        outcome = 0
        if(winningOutcomes[1]==0):
            outcome = CLOSEONE.oneOutcome(market, winningOutcomes[0])
        elif(winningOutcomes[7]):
            outcome = CLOSEEIGHT.eightOutcomes(market, winningOutcomes, events)
        elif(winningOutcomes[3]):
            outcome = CLOSEFOUR.fourOutcomes(market, winningOutcomes, events)
        elif(winningOutcomes[1]):
            outcome = CLOSETWO.twoOutcomes(market, winningOutcomes, events)
        return(outcome)
    else:
        return(0)
        
### Helper functions
def returnLiquidity(branch, market):
    # give back initial liquidity and ls-lmsr alpha fees (or as much of it/profits are left)
    # refund left over initial liquidity in market - half to market creator, other half to voters
    # *unless* it's a scaled decision, refund all initial liquidity left over to market creator
    # rest of money available in market + the additional trading fees divy up amongst reporters and market creator
    initialLiquidity = INFO.getCreationFee(market)
    winningOutcomes = array(8)
    winningOutcomes = MARKETS.getWinningOutcomes(market, outitems=8)
    valueOfShares = 0
    creator = INFO.getCreator(market)
    if(winningOutcomes[1]==0):
        valueOfShares = CLOSEONE.valueCalcOne(market, winningOutcomes[0])
    elif(winningOutcomes[7]):
        valueOfShares = CLOSEEIGHT.valueCalcEight(market, winningOutcomes, events)
    elif(winningOutcomes[3]):
        valueOfShares = CLOSEFOUR.valueCalcFour(market, winningOutcomes, events)
    elif(winningOutcomes[1]):
        valueOfShares = CLOSETWO.valueCalcTwo(market, winningOutcomes, events)

    liquidityRemaining = CASH.balance(market) - valueOfShares
    if(liquidityRemaining<0):
        return(-1)
    # some scalar involved
    if(winningOutcomes[1]):
        if(liquidityRemaining > initialLiquidity):
            # pay back liquidity, split up excess profits
            CASH.addCash(creator, initialLiquidity)
            CASH.subtractCash(market, initialLiquidity)
            liquidityRemaining -= initialLiquidity
            CASH.addCash(branch, liquidityRemaining/2)
            CASH.addCash(creator, liquidityRemaining/2)
            CASH.subtractCash(market, liquidityRemaining)
        # send whatever's left of the initial liquidity to the creator
        else:
            CASH.addCash(creator, liquidityRemaining)
            CASH.subtractCash(market, liquidityRemaining)
    # no scalars
    else:
        # split up excess profits & liquidity
        CASH.addCash(branch, liquidityRemaining/2)
        CASH.addCash(creator, liquidityRemaining/2)
        CASH.subtractCash(market, liquidityRemaining)
    return(1)
    
macro scalar($event):
    ((EVENTS.getMaxValue($event)!=2 || EVENTS.getMinValue($event)!=1) && EVENTS.getNumOutcomes($event)==2)
    
macro binary($event):
    (EVENTS.getNumOutcomes($event)==2 and 2**64*EVENTS.getMaxValue($event)==2**65 and EVENTS.getMinValue($event)==1)
    
macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)