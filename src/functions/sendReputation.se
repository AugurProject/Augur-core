# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import cash as CASH
import reporting as REPORTING
import makeReports as REPORTS
import consensus as CONSENSUS

# @return value of reputation sent, 0 if not enough reputation
# error messages otherwise
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: "Receiving address doesn't exist"
def sendReputation(branch, recver, value):
    # Rep cannot be simultaneously spent (transferred) and used to vote
    # auto increment vote period if needed
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    #if(value<=0 || !CASH.send(branch, 5*2^64) || EXPEVENTS.getReport(branch, currentVotePeriod, tx.origin, 0) != 0 || EXPEVENTS.getReport(branch, currentVotePeriod, msg.sender, 0) != 0 || EXPEVENTS.getReport(branch, currentVotePeriod, recver, 0) != 0):
    # MAKEREPORTS.getReportedPeriod(branch, current)
    #    return(0)
    # need to check all this for the person it's being sent to as well
    #if(REPORTS.getRRUpToDate()!=1):
    #    doIt()
    #    self.RRDone = true
    #if(hasReported(lastPeriod) && periodOver && hasntcollectedfees && residual > periodLength/2):
    #    CONSENSUS.collectFees(lastPeriod)
    # before rep, after rep, balance
    # person you're sending to needs rr up to date / done as well
    sender = tx.origin
    senderIndex = REPORTING.repIDToIndex(branch, sender)
    receiverIndex = REPORTING.repIDToIndex(branch, recver)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=tx.origin):
        CONSENSUS.initialPenalizedSetting(branch, tx.origin, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)

    if(REPORTING.getReporterID(branch, receiverIndex)!=recver):
        return(-2)

    senderBalance = REPORTING.getRepBalance(branch, sender)
    if(senderBalance >= value && value > 0):
        if(REPORTING.subtractRep(branch, senderIndex, value) && REPORTING.addRep(branch, receiverIndex, value)):
            return(value)
        else:
            return(0)
    else:
        return(0)

# @return value of reputation sent, 0 if not enough reputation
# error messages otherwise
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: "Receiving address doesn't exist"
def sendDormantRep(branch, recver, value):
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    if(value<=0 || !CASH.send(branch, 5*2^64)):
        return(0)

    sender = tx.origin
    senderIndex = REPORTING.repIDToIndex(branch, sender)
    receiverIndex = REPORTING.repIDToIndex(branch, recver)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=tx.origin):
        CONSENSUS.initialPenalizedSetting(branch, tx.origin, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)

    if(REPORTING.getReporterID(branch, receiverIndex)!=recver):
        return(-2)

    senderBalance = REPORTING.getDormantRepBalance(branch, sender)
    if(senderBalance >= value && value > 0):
        if(REPORTING.subtractDormantRep(branch, senderIndex, value) && REPORTING.addDormantRep(branch, receiverIndex, value)):
            return(value)
        else:
            return(0)
    else:
        return(0)

# error messages
    # -1: not in first half of reporting period
def convertToDormantRep(branch, value):
    # if not in first half of reporting period
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
      return(-1)
		# benny comment:
            #```Maybe still have this sort-of variable "power" to it, but REP initially doesn't have "full-power", or REP that hasn't been used to report over the past week has now let it's "power-meter" drop to only 20% earning power (it's kind-of dormant), that then ramps back up to 100% power once it gets used a bit. Could there be an element of this type of time-decay programmed into the REP that's helps incentive? Something like this would make the system more automatic, rather than relying on the user to manually switch "on" or switch "off" the REP. If a user knows, "I better report this week or my REP's power meter goes down to 20% again, and it's gonna take extra effort to get it back to full-power", well that's pretty good incentive to keep the user active, without actually taking it from them.```

    if(value<=0 || !CASH.send(branch, 5*2^64) || REPORTS.getSubmittedHash(branch, period, msg.sender)):
        return(0)

    #if(REPORTS.getRRUpToDate()!=1):
    #    doIt()

    #if(hasReported(lastPeriod) && periodOver):
        #CONSENSUS.collectFees(lastPeriod)

    sender = tx.origin
    senderIndex = REPORTING.repIDToIndex(branch, sender)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=tx.origin):
        CONSENSUS.initialPenalizedSetting(branch, tx.origin, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)

    senderBalance = REPORTING.getRepBalance(branch, sender)
    if(senderBalance >= value):
        if(REPORTING.subtractRep(branch, senderIndex, value) && REPORTING.addDormantRep(branch, senderIndex, value)):
            return(value)
        else:
            return(0)
    else:
        return(0)

# error messages
    # -1: not in first half of reporting period
def convertToActiveRep(branch, value):
    # if not in first half of reporting period
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
      return(-1)

    if(value<=0 || !CASH.send(branch, 5*2^64) || REPORTS.getSubmittedHash(branch, period, msg.sender)):
        return(0)

    #if(REPORTS.getRRUpToDate()):
        #doIt()
    #if(hasReported(lastPeriod) && periodOver):
        #CONSENSUS.collectFees(lastPeriod)

    sender = tx.origin
    senderIndex = REPORTING.repIDToIndex(branch, sender)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=tx.origin):
        CONSENSUS.initialPenalizedSetting(branch, tx.origin, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)

    senderBalance = REPORTING.getDormantRepBalance(branch, sender)
    if(senderBalance >= value):
        if(REPORTING.subtractDormantRep(branch, senderIndex, value) && REPORTING.addRep(branch, senderIndex, value)):
            return(value)
        else:
            return(0)
    else:
        return(0)
